{"ast":null,"code":"import create from \"zustand\";\nimport shallow from \"zustand/shallow\";\nconst setCustomData = customData => {\n  setPerf({\n    customData\n  });\n};\nconst getCustomData = () => {\n  return getPerf().customData;\n};\nconst usePerfImpl = create((set, get) => {\n  function getReport() {\n    var _a;\n    const {\n      accumulated,\n      startTime,\n      infos\n    } = get();\n    const maxMemory = (_a = get().log) == null ? void 0 : _a.maxMemory;\n    const {\n      totalFrames,\n      log,\n      gl,\n      max\n    } = accumulated;\n    const glAverage = {\n      calls: gl.calls / totalFrames,\n      triangles: gl.triangles / totalFrames,\n      points: gl.points / totalFrames,\n      lines: gl.lines / totalFrames\n    };\n    const logAverage = {\n      gpu: log.gpu / totalFrames,\n      cpu: log.cpu / totalFrames,\n      mem: log.mem / totalFrames,\n      fps: log.fps / totalFrames\n    };\n    const sessionTime = (window.performance.now() - startTime) / 1e3;\n    return {\n      sessionTime,\n      infos,\n      log: logAverage,\n      gl: glAverage,\n      max,\n      maxMemory,\n      totalFrames\n    };\n  }\n  return {\n    log: null,\n    paused: false,\n    triggerProgramsUpdate: 0,\n    startTime: 0,\n    customData: 0,\n    fpsLimit: 60,\n    overclockingFps: false,\n    accumulated: {\n      totalFrames: 0,\n      gl: {\n        calls: 0,\n        triangles: 0,\n        points: 0,\n        lines: 0,\n        counts: 0\n      },\n      log: {\n        gpu: 0,\n        cpu: 0,\n        mem: 0,\n        fps: 0\n      },\n      max: {\n        gl: {\n          calls: 0,\n          triangles: 0,\n          points: 0,\n          lines: 0,\n          counts: 0\n        },\n        log: {\n          gpu: 0,\n          cpu: 0,\n          mem: 0,\n          fps: 0\n        }\n      }\n    },\n    chart: {\n      data: {\n        fps: [],\n        cpu: [],\n        gpu: [],\n        mem: []\n      },\n      circularId: 0\n    },\n    gl: void 0,\n    objectWithMaterials: null,\n    scene: void 0,\n    programs: /* @__PURE__ */new Map(),\n    sceneLength: void 0,\n    tab: \"infos\",\n    getReport\n  };\n});\nconst usePerf = sel => usePerfImpl(sel, shallow);\nObject.assign(usePerf, usePerfImpl);\nconst {\n  getState: getPerf,\n  setState: setPerf\n} = usePerfImpl;\nexport { getCustomData, getPerf, setCustomData, setPerf, usePerf, usePerfImpl };","map":{"version":3,"names":["setCustomData","customData","setPerf","getCustomData","getPerf","usePerfImpl","create","set","get","getReport","accumulated","startTime","infos","maxMemory","_a","log","totalFrames","gl","max","glAverage","calls","triangles","points","lines","logAverage","gpu","cpu","mem","fps","sessionTime","window","performance","now","paused","triggerProgramsUpdate","fpsLimit","overclockingFps","counts","chart","data","circularId","objectWithMaterials","scene","programs","Map","sceneLength","tab","usePerf","sel","shallow","Object","assign","getState","setState"],"sources":["/home/joshua/Documents/proyectos/proyecto-integrador/reto_clase_4/node_modules/r3f-perf/src/store.ts"],"sourcesContent":["import create from 'zustand'\nimport shallow from 'zustand/shallow'\nimport * as THREE from 'three'\n\ntype drawCount = {\n  type: string\n  drawCount: number\n}\nexport type drawCounts = {\n  total: number\n  type: string\n  data: drawCount[]\n}\n\nexport type ProgramsPerf = {\n  meshes?: {\n    [index: string]: THREE.Mesh[]\n  }\n  material: THREE.Material\n  program?: WebGLProgram\n  visible: boolean\n  drawCounts: drawCounts\n  expand: boolean\n}\n\ntype Logger = {\n  i: number\n  maxMemory: number\n  gpu: number\n  mem: number\n  cpu: number\n  fps: number\n  duration: number\n  frameCount: number\n}\n\ntype GLLogger = {\n  calls: number\n  triangles: number\n  points: number\n  lines: number\n  counts: number\n}\n\nexport type State = {\n  getReport: () => any\n  log: any\n  paused: boolean\n  overclockingFps: boolean\n  fpsLimit: number\n  startTime: number\n  triggerProgramsUpdate: number\n  customData: number\n  accumulated: {\n    totalFrames: number\n    log: Logger\n    gl: GLLogger\n    max: {\n      log: Logger\n      gl: GLLogger\n    }\n  }\n  chart: {\n    data: {\n      [index: string]: number[]\n    }\n    circularId: number\n  }\n  infos: {\n    version: string\n    renderer: string\n    vendor: string\n  }\n  gl: THREE.WebGLRenderer | undefined\n  scene: THREE.Scene | undefined\n  programs: ProgramsPerfs\n  objectWithMaterials: THREE.Mesh[] | null\n  tab: 'infos' | 'programs' | 'data'\n}\n\nexport type ProgramsPerfs = Map<string, ProgramsPerf>\n\nconst setCustomData = (customData: number) => {\n  setPerf({ customData })\n}\nconst getCustomData = () => {\n  return getPerf().customData\n}\n\nexport const usePerfImpl = create<State>((set, get): any => {\n  function getReport() {\n    const { accumulated, startTime, infos } = get()\n    const maxMemory = get().log?.maxMemory\n    const { totalFrames, log, gl, max } = accumulated\n\n    const glAverage = {\n      calls: gl.calls / totalFrames,\n      triangles: gl.triangles / totalFrames,\n      points: gl.points / totalFrames,\n      lines: gl.lines / totalFrames,\n    }\n\n    const logAverage = {\n      gpu: log.gpu / totalFrames,\n      cpu: log.cpu / totalFrames,\n      mem: log.mem / totalFrames,\n      fps: log.fps / totalFrames,\n    }\n\n    const sessionTime = (window.performance.now() - startTime) / 1000\n\n    return {\n      sessionTime,\n      infos,\n      log: logAverage,\n      gl: glAverage,\n      max,\n      maxMemory,\n      totalFrames,\n    }\n  }\n\n  return {\n    log: null,\n    paused: false,\n    triggerProgramsUpdate: 0,\n    startTime: 0,\n    customData: 0,\n    fpsLimit: 60,\n    overclockingFps: false,\n    accumulated: {\n      totalFrames: 0,\n      gl: {\n        calls: 0,\n        triangles: 0,\n        points: 0,\n        lines: 0,\n        counts: 0,\n      },\n      log: {\n        gpu: 0,\n        cpu: 0,\n        mem: 0,\n        fps: 0,\n      },\n      max: {\n        gl: {\n          calls: 0,\n          triangles: 0,\n          points: 0,\n          lines: 0,\n          counts: 0,\n        },\n        log: {\n          gpu: 0,\n          cpu: 0,\n          mem: 0,\n          fps: 0,\n        },\n      },\n    },\n    chart: {\n      data: {\n        fps: [],\n        cpu: [],\n        gpu: [],\n        mem: [],\n      },\n      circularId: 0,\n    },\n    gl: undefined,\n    objectWithMaterials: null,\n    scene: undefined,\n    programs: new Map(),\n    sceneLength: undefined,\n    tab: 'infos',\n    getReport,\n  }\n})\n\nconst usePerf = (sel: (state: State) => unknown) => usePerfImpl(sel, shallow)\nObject.assign(usePerf, usePerfImpl)\nconst { getState: getPerf, setState: setPerf } = usePerfImpl\n\nexport { usePerf, getPerf, setPerf, setCustomData, getCustomData }\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}