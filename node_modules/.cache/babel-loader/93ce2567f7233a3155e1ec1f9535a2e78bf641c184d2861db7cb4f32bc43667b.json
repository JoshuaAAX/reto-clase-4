{"ast":null,"code":"import { jsxs, jsx, Fragment } from \"react/jsx-runtime\";\nimport React, { useRef } from \"react\";\nimport { ChartUI } from \"./Graph.mjs\";\nimport { LightningBoltIcon, RulerHorizontalIcon, LapTimerIcon, TextAlignJustifyIcon, VercelLogoIcon, BarChartIcon, MarginIcon, ImageIcon, ActivityLogIcon, MinusIcon, DotIcon, DropdownMenuIcon, TriangleDownIcon, TriangleUpIcon } from \"@radix-ui/react-icons\";\nimport { HtmlMinimal } from \"./HtmlMinimal.mjs\";\nimport { PerfHeadless } from \"./PerfHeadless.mjs\";\nimport { PerfB, PerfIContainer, PerfI, PerfSmallI, Toggle, ToggleContainer, ContainerScroll, PerfS } from \"../styles.mjs\";\nimport { ProgramsUI } from \"./Program.mjs\";\nimport { usePerf, setPerf } from \"../store.mjs\";\nconst colorsGraph = colorBlind => {\n  const colors = {\n    overClock: `#ff6eff`,\n    fps: colorBlind ? \"100, 143, 255\" : \"238,38,110\",\n    cpu: colorBlind ? \"254, 254, 98\" : \"66,226,46\",\n    gpu: colorBlind ? \"254,254,254\" : \"253,151,31\",\n    custom: colorBlind ? \"86,180,233\" : \"40,255,255\"\n  };\n  return colors;\n};\nconst DynamicUIPerf = _ref => {\n  let {\n    showGraph,\n    colorBlind\n  } = _ref;\n  const overclockingFps = usePerf(s => s.overclockingFps);\n  const fpsLimit = usePerf(s => s.fpsLimit);\n  return /* @__PURE__ */jsxs(PerfB, {\n    style: showGraph ? {\n      color: overclockingFps ? colorsGraph(colorBlind).overClock.toString() : `rgb(${colorsGraph(colorBlind).fps})`\n    } : {},\n    children: [\"FPS \", overclockingFps ? `${fpsLimit}ðŸš€` : \"\"]\n  });\n};\nconst DynamicUI = _ref2 => {\n  let {\n    showGraph,\n    colorBlind,\n    customData,\n    minimal\n  } = _ref2;\n  const gl = usePerf(state => state.gl);\n  return gl ? /* @__PURE__ */jsxs(PerfIContainer, {\n    children: [/* @__PURE__ */jsxs(PerfI, {\n      children: [/* @__PURE__ */jsx(LightningBoltIcon, {}), /* @__PURE__ */jsx(PerfB, {\n        style: showGraph ? {\n          color: `rgb(${colorsGraph(colorBlind).gpu.toString()})`\n        } : {},\n        children: \"GPU\"\n      }), /* @__PURE__ */jsx(PerfSmallI, {\n        children: \"ms\"\n      })]\n    }), /* @__PURE__ */jsxs(PerfI, {\n      children: [/* @__PURE__ */jsx(RulerHorizontalIcon, {}), /* @__PURE__ */jsx(PerfB, {\n        style: showGraph ? {\n          color: `rgb(${colorsGraph(colorBlind).cpu.toString()})`\n        } : {},\n        children: \"CPU\"\n      }), /* @__PURE__ */jsx(PerfSmallI, {\n        children: \"ms\"\n      })]\n    }), /* @__PURE__ */jsxs(PerfI, {\n      children: [/* @__PURE__ */jsx(LapTimerIcon, {}), /* @__PURE__ */jsx(DynamicUIPerf, {\n        showGraph,\n        colorBlind\n      })]\n    }), !minimal && gl && /* @__PURE__ */jsxs(PerfI, {\n      children: [/* @__PURE__ */jsx(TextAlignJustifyIcon, {}), /* @__PURE__ */jsx(PerfB, {\n        children: gl.info.render.calls === 1 ? \"call\" : \"calls\"\n      })]\n    }), !minimal && gl && /* @__PURE__ */jsxs(PerfI, {\n      children: [/* @__PURE__ */jsx(VercelLogoIcon, {}), /* @__PURE__ */jsx(PerfB, {\n        children: \"Triangles\"\n      })]\n    }), customData && /* @__PURE__ */jsxs(PerfI, {\n      children: [/* @__PURE__ */jsx(BarChartIcon, {}), /* @__PURE__ */jsx(PerfB, {\n        style: showGraph ? {\n          color: `rgb(${colorsGraph(colorBlind).custom})`\n        } : {},\n        children: customData.name\n      }), customData.info && /* @__PURE__ */jsx(PerfSmallI, {\n        children: customData.info\n      })]\n    })]\n  }) : null;\n};\nconst PerfUI = _ref3 => {\n  let {\n    showGraph,\n    colorBlind,\n    deepAnalyze,\n    customData,\n    matrixUpdate,\n    openByDefault,\n    minimal\n  } = _ref3;\n  return /* @__PURE__ */jsxs(Fragment, {\n    children: [/* @__PURE__ */jsx(DynamicUI, {\n      showGraph,\n      colorBlind,\n      customData,\n      minimal\n    }), !minimal && /* @__PURE__ */jsx(PerfThree, {\n      matrixUpdate,\n      openByDefault,\n      deepAnalyze,\n      showGraph\n    })]\n  });\n};\nconst InfoUI = _ref4 => {\n  let {\n    matrixUpdate\n  } = _ref4;\n  return /* @__PURE__ */jsxs(\"div\", {\n    children: [/* @__PURE__ */jsxs(PerfI, {\n      children: [/* @__PURE__ */jsx(MarginIcon, {}), /* @__PURE__ */jsx(PerfB, {\n        children: \"Geometries\"\n      })]\n    }), /* @__PURE__ */jsxs(PerfI, {\n      children: [/* @__PURE__ */jsx(ImageIcon, {}), /* @__PURE__ */jsx(PerfB, {\n        children: \"Textures\"\n      })]\n    }), /* @__PURE__ */jsxs(PerfI, {\n      children: [/* @__PURE__ */jsx(ActivityLogIcon, {}), /* @__PURE__ */jsx(PerfB, {\n        children: \"shaders\"\n      })]\n    }), /* @__PURE__ */jsxs(PerfI, {\n      children: [/* @__PURE__ */jsx(MinusIcon, {}), /* @__PURE__ */jsx(PerfB, {\n        children: \"Lines\"\n      })]\n    }), /* @__PURE__ */jsxs(PerfI, {\n      children: [/* @__PURE__ */jsx(DotIcon, {}), /* @__PURE__ */jsx(PerfB, {\n        children: \"Points\"\n      })]\n    }), matrixUpdate && /* @__PURE__ */jsxs(PerfI, {\n      children: [/* @__PURE__ */jsx(DropdownMenuIcon, {}), /* @__PURE__ */jsx(PerfB, {\n        children: \"Matrices\"\n      })]\n    })]\n  });\n};\nconst ToggleEl = _ref5 => {\n  let {\n    tab,\n    title,\n    set\n  } = _ref5;\n  const tabStore = usePerf(s => s.tab);\n  return /* @__PURE__ */jsx(Toggle, {\n    className: `${tabStore === tab ? \" __perf_toggle_tab_active\" : \"\"}`,\n    onClick: () => {\n      set(true);\n      setPerf({\n        tab\n      });\n    },\n    children: /* @__PURE__ */jsx(\"span\", {\n      children: title\n    })\n  });\n};\nconst PerfThree = _ref6 => {\n  let {\n    openByDefault,\n    showGraph,\n    deepAnalyze,\n    matrixUpdate\n  } = _ref6;\n  const [show, set] = React.useState(openByDefault);\n  return /* @__PURE__ */jsxs(\"span\", {\n    children: [/* @__PURE__ */jsx(TabContainers, {\n      show,\n      showGraph,\n      matrixUpdate\n    }), openByDefault && !deepAnalyze ? null : /* @__PURE__ */jsxs(ToggleContainer, {\n      className: \"__perf_toggle\",\n      children: [deepAnalyze && /* @__PURE__ */jsx(ToggleEl, {\n        tab: \"programs\",\n        title: \"Programs\",\n        set\n      }), deepAnalyze && /* @__PURE__ */jsx(ToggleEl, {\n        tab: \"infos\",\n        title: \"Infos\",\n        set\n      }), /* @__PURE__ */jsx(Toggle, {\n        onClick: () => {\n          set(!show);\n        },\n        children: show ? /* @__PURE__ */jsxs(\"span\", {\n          children: [/* @__PURE__ */jsx(TriangleDownIcon, {}), \" Minimize\"]\n        }) : /* @__PURE__ */jsxs(\"span\", {\n          children: [/* @__PURE__ */jsx(TriangleUpIcon, {}), \" More\"]\n        })\n      })]\n    })]\n  });\n};\nconst TabContainers = _ref7 => {\n  let {\n    show,\n    showGraph,\n    matrixUpdate\n  } = _ref7;\n  const tab = usePerf(state => state.tab);\n  return /* @__PURE__ */jsxs(Fragment, {\n    children: [/* @__PURE__ */jsx(InfoUI, {\n      matrixUpdate\n    }), show && /* @__PURE__ */jsx(\"div\", {\n      children: /* @__PURE__ */jsx(ContainerScroll, {\n        style: {\n          marginTop: showGraph ? \"38px\" : 0\n        },\n        children: tab === \"programs\" && /* @__PURE__ */jsx(ProgramsUI, {})\n      })\n    })]\n  });\n};\nconst Perf = _ref8 => {\n  let {\n    showGraph = true,\n    colorBlind = false,\n    openByDefault = true,\n    className,\n    overClock = false,\n    style,\n    position = \"top-right\",\n    chart,\n    logsPerSecond,\n    deepAnalyze = false,\n    antialias = true,\n    customData,\n    matrixUpdate,\n    minimal\n  } = _ref8;\n  const perfContainerRef = useRef(null);\n  return /* @__PURE__ */jsxs(Fragment, {\n    children: [/* @__PURE__ */jsx(PerfHeadless, {\n      logsPerSecond,\n      chart,\n      overClock,\n      deepAnalyze,\n      matrixUpdate\n    }), /* @__PURE__ */jsx(HtmlMinimal, {\n      name: \"r3f-perf\",\n      children: /* @__PURE__ */jsxs(PerfS, {\n        className: (className ? \" \".concat(className) : \" \") + ` ${position ? position : \"\"} ${minimal ? \"minimal\" : \"\"}`,\n        style: {\n          minHeight: minimal ? \"37px\" : showGraph ? \"100px\" : \"60px\",\n          ...style\n        },\n        ref: perfContainerRef,\n        children: [/* @__PURE__ */jsx(ChartUI, {\n          perfContainerRef,\n          colorBlind,\n          chart,\n          showGraph,\n          antialias,\n          customData,\n          minimal,\n          matrixUpdate\n        }), /* @__PURE__ */jsx(PerfUI, {\n          colorBlind,\n          showGraph,\n          deepAnalyze,\n          openByDefault,\n          customData,\n          matrixUpdate,\n          minimal\n        })]\n      })\n    })]\n  });\n};\nexport { Perf, colorsGraph };","map":{"version":3,"names":["colorsGraph","colorBlind","colors","overClock","fps","cpu","gpu","custom","DynamicUIPerf","_ref","showGraph","overclockingFps","usePerf","s","fpsLimit","jsxs","PerfB","style","color","toString","children","DynamicUI","_ref2","customData","minimal","gl","state","PerfIContainer","PerfI","jsx","LightningBoltIcon","PerfSmallI","RulerHorizontalIcon","LapTimerIcon","TextAlignJustifyIcon","info","render","calls","VercelLogoIcon","BarChartIcon","name","PerfUI","_ref3","deepAnalyze","matrixUpdate","openByDefault","Fragment","PerfThree","InfoUI","_ref4","MarginIcon","ImageIcon","ActivityLogIcon","MinusIcon","DotIcon","DropdownMenuIcon","ToggleEl","_ref5","tab","title","set","tabStore","Toggle","className","onClick","setPerf","_ref6","show","React","useState","TabContainers","ToggleContainer","TriangleDownIcon","TriangleUpIcon","_ref7","ContainerScroll","marginTop","ProgramsUI","Perf","_ref8","position","chart","logsPerSecond","antialias","perfContainerRef","useRef","PerfHeadless","HtmlMinimal","PerfS","concat","minHeight","ref","ChartUI"],"sources":["/home/joshua/Documents/proyectos/proyecto-integrador/reto_clase_4/node_modules/r3f-perf/src/components/Perf.tsx"],"sourcesContent":["import React, { FC, useRef } from 'react'\nimport { ChartUI } from './Graph'\nimport {\n  ActivityLogIcon,\n  BarChartIcon,\n  DotIcon,\n  DropdownMenuIcon,\n  ImageIcon,\n  LapTimerIcon,\n  LightningBoltIcon,\n  MarginIcon,\n  MinusIcon,\n  RulerHorizontalIcon,\n  TextAlignJustifyIcon,\n  TriangleDownIcon,\n  TriangleUpIcon,\n  VercelLogoIcon,\n} from '@radix-ui/react-icons'\n\nimport { HtmlMinimal } from './HtmlMinimal'\nimport { PerfHeadless } from './PerfHeadless'\n\nimport { Toggle, PerfS, PerfIContainer, PerfI, PerfB, ToggleContainer, ContainerScroll, PerfSmallI } from '../styles'\nimport { ProgramsUI } from './Program'\nimport { setPerf, usePerf } from '../store'\nimport { PerfPropsGui } from '../typings'\n\ninterface colors {\n  [index: string]: string\n}\n\nexport const colorsGraph = (colorBlind: boolean | undefined) => {\n  const colors: colors = {\n    overClock: `#ff6eff`,\n    fps: colorBlind ? '100, 143, 255' : '238,38,110',\n    cpu: colorBlind ? '254, 254, 98' : '66,226,46',\n    gpu: colorBlind ? '254,254,254' : '253,151,31',\n    custom: colorBlind ? '86,180,233' : '40,255,255',\n  }\n  return colors\n}\n\nconst DynamicUIPerf: FC<PerfPropsGui> = ({ showGraph, colorBlind }) => {\n  const overclockingFps = usePerf((s) => s.overclockingFps)\n  const fpsLimit = usePerf((s) => s.fpsLimit)\n\n  return (\n    <PerfB\n      style={\n        showGraph\n          ? {\n              color: overclockingFps\n                ? colorsGraph(colorBlind).overClock.toString()\n                : `rgb(${colorsGraph(colorBlind).fps})`,\n            }\n          : {}\n      }>\n      FPS {overclockingFps ? `${fpsLimit}ðŸš€` : ''}\n    </PerfB>\n  )\n}\n\nconst DynamicUI: FC<PerfPropsGui> = ({ showGraph, colorBlind, customData, minimal }) => {\n  const gl = usePerf((state) => state.gl)\n\n  return gl ? (\n    <PerfIContainer>\n      <PerfI>\n        <LightningBoltIcon />\n        <PerfB\n          style={\n            showGraph\n              ? {\n                  color: `rgb(${colorsGraph(colorBlind).gpu.toString()})`,\n                }\n              : {}\n          }>\n          GPU\n        </PerfB>\n        <PerfSmallI>ms</PerfSmallI>\n      </PerfI>\n      <PerfI>\n        <RulerHorizontalIcon />\n        <PerfB\n          style={\n            showGraph\n              ? {\n                  color: `rgb(${colorsGraph(colorBlind).cpu.toString()})`,\n                }\n              : {}\n          }>\n          CPU\n        </PerfB>\n        <PerfSmallI>ms</PerfSmallI>\n      </PerfI>\n      {/* <PerfI>\n        <RulerHorizontalIcon />\n        <PerfB  style={\n            showGraph\n              ? {\n                  color: `rgb(${colorsGraph(colorBlind).cpu.toString()})`,\n                }\n              : {}\n          }>Memory</PerfB>\n        <PerfSmallI>mb</PerfSmallI>\n      </PerfI> */}\n      <PerfI>\n        <LapTimerIcon />\n        <DynamicUIPerf showGraph={showGraph} colorBlind={colorBlind} />\n      </PerfI>\n      {!minimal && gl && (\n        <PerfI>\n          <TextAlignJustifyIcon />\n          {/* @ts-ignore */}\n          <PerfB>{gl.info.render.calls === 1 ? 'call' : 'calls'}</PerfB>\n        </PerfI>\n      )}\n      {!minimal && gl && (\n        <PerfI>\n          <VercelLogoIcon />\n          <PerfB>Triangles</PerfB>\n        </PerfI>\n      )}\n      {customData && (\n        <PerfI>\n          <BarChartIcon />\n          <PerfB style={showGraph ? { color: `rgb(${colorsGraph(colorBlind).custom})` } : {}}>{customData.name}</PerfB>\n          {customData.info && <PerfSmallI>{customData.info}</PerfSmallI>}\n        </PerfI>\n      )}\n    </PerfIContainer>\n  ) : null\n}\n\nconst PerfUI: FC<PerfPropsGui> = ({\n  showGraph,\n  colorBlind,\n  deepAnalyze,\n  customData,\n  matrixUpdate,\n  openByDefault,\n  minimal,\n}) => {\n  return (\n    <>\n      <DynamicUI showGraph={showGraph} colorBlind={colorBlind} customData={customData} minimal={minimal} />\n      {!minimal && (\n        <PerfThree\n          matrixUpdate={matrixUpdate}\n          openByDefault={openByDefault}\n          deepAnalyze={deepAnalyze}\n          showGraph={showGraph}\n        />\n      )}\n    </>\n  )\n}\n\nconst InfoUI: FC<PerfPropsGui> = ({ matrixUpdate }) => {\n  return (\n    <div>\n      <PerfI>\n        <MarginIcon />\n        <PerfB>Geometries</PerfB>\n      </PerfI>\n      <PerfI>\n        <ImageIcon />\n        <PerfB>Textures</PerfB>\n      </PerfI>\n      <PerfI>\n        <ActivityLogIcon />\n        <PerfB>shaders</PerfB>\n      </PerfI>\n      <PerfI>\n        <MinusIcon />\n        <PerfB>Lines</PerfB>\n      </PerfI>\n      <PerfI>\n        <DotIcon />\n        <PerfB>Points</PerfB>\n      </PerfI>\n      {matrixUpdate && (\n        <PerfI>\n          <DropdownMenuIcon />\n          <PerfB>Matrices</PerfB>\n        </PerfI>\n      )}\n    </div>\n  )\n}\n\nconst ToggleEl = ({ tab, title, set }: any) => {\n  const tabStore = usePerf((s: { tab: any }) => s.tab)\n  return (\n    <Toggle\n      className={`${tabStore === tab ? ' __perf_toggle_tab_active' : ''}`}\n      onClick={() => {\n        set(true)\n        setPerf({ tab: tab })\n      }}>\n      <span>{title}</span>\n    </Toggle>\n  )\n}\nconst PerfThree: FC<PerfPropsGui> = ({ openByDefault, showGraph, deepAnalyze, matrixUpdate }) => {\n  const [show, set] = React.useState(openByDefault)\n\n  return (\n    <span>\n      <TabContainers show={show} showGraph={showGraph} matrixUpdate={matrixUpdate} />\n      {openByDefault && !deepAnalyze ? null : (\n        <ToggleContainer className={'__perf_toggle'}>\n          {/* <ToggleEl tab=\"inspector\" title=\"Inspector\" set={set} /> */}\n          {deepAnalyze && <ToggleEl tab=\"programs\" title=\"Programs\" set={set} />}\n          {deepAnalyze && <ToggleEl tab=\"infos\" title=\"Infos\" set={set} />}\n          <Toggle\n            onClick={() => {\n              set(!show)\n            }}>\n            {show ? (\n              <span>\n                <TriangleDownIcon /> Minimize\n              </span>\n            ) : (\n              <span>\n                <TriangleUpIcon /> More\n              </span>\n            )}\n          </Toggle>\n        </ToggleContainer>\n      )}\n    </span>\n  )\n}\n\nconst TabContainers = ({ show, showGraph, matrixUpdate }: any) => {\n  const tab = usePerf((state) => state.tab)\n\n  return (\n    <>\n      <InfoUI matrixUpdate={matrixUpdate} />\n      {show && (\n        <div>\n          <ContainerScroll style={{ marginTop: showGraph ? '38px' : 0 }}>\n            {tab === 'programs' && <ProgramsUI />}\n          </ContainerScroll>\n        </div>\n      )}\n    </>\n  )\n}\n/**\n * Performance profiler component\n */\nexport const Perf: FC<PerfPropsGui> = ({\n  showGraph = true,\n  colorBlind = false,\n  openByDefault = true,\n  className,\n  overClock = false,\n  style,\n  position = 'top-right',\n  chart,\n  logsPerSecond,\n  deepAnalyze = false,\n  antialias = true,\n  customData,\n  matrixUpdate,\n  minimal,\n}) => {\n  const perfContainerRef = useRef(null)\n\n  return (\n    <>\n      <PerfHeadless\n        logsPerSecond={logsPerSecond}\n        chart={chart}\n        overClock={overClock}\n        deepAnalyze={deepAnalyze}\n        matrixUpdate={matrixUpdate}\n      />\n      <HtmlMinimal name='r3f-perf'>\n        <PerfS\n          className={\n            (className ? ' '.concat(className) : ' ') + ` ${position ? position : ''} ${minimal ? 'minimal' : ''}`\n          }\n          style={{ minHeight: minimal ? '37px' : showGraph ? '100px' : '60px', ...style }}\n          ref={perfContainerRef}>\n          <ChartUI\n            perfContainerRef={perfContainerRef}\n            colorBlind={colorBlind}\n            chart={chart}\n            showGraph={showGraph}\n            antialias={antialias}\n            customData={customData}\n            minimal={minimal}\n            matrixUpdate={matrixUpdate}\n          />\n          <PerfUI\n            colorBlind={colorBlind}\n            showGraph={showGraph}\n            deepAnalyze={deepAnalyze}\n            openByDefault={openByDefault}\n            customData={customData}\n            matrixUpdate={matrixUpdate}\n            minimal={minimal}\n          />\n        </PerfS>\n      </HtmlMinimal>\n    </>\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}