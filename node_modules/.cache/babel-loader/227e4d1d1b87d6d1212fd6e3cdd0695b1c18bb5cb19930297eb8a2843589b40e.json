{"ast":null,"code":"import { jsx, jsxs, Fragment } from \"react/jsx-runtime\";\nimport { useState, useEffect } from \"react\";\nimport { ProgramsUL, ProgramConsole, PerfI, PerfB, ProgramGeo, ProgramHeader, Toggle, ProgramTitle, ToggleVisible, ProgramsULHeader, ProgramsGeoLi, ProgramsContainer } from \"../styles.mjs\";\nimport \"../index.mjs\";\nimport { VercelLogoIcon, ActivityLogIcon, TriangleDownIcon, TriangleUpIcon, LayersIcon, ImageIcon, RocketIcon, EyeOpenIcon, EyeNoneIcon, ButtonIcon, CubeIcon } from \"@radix-ui/react-icons\";\nimport { estimateBytesUsed } from \"../helpers/estimateBytesUsed.mjs\";\nimport { usePerf } from \"../store.mjs\";\nconst addTextureUniforms = (id, texture) => {\n  const repeatType = wrap => {\n    switch (wrap) {\n      case 1e3:\n        return \"RepeatWrapping\";\n      case 1001:\n        return \"ClampToEdgeWrapping\";\n      case 1002:\n        return \"MirroredRepeatWrapping\";\n      default:\n        return \"ClampToEdgeWrapping\";\n    }\n  };\n  const encodingType = encoding => {\n    switch (encoding) {\n      case 3e3:\n        return \"LinearEncoding\";\n      case 3001:\n        return \"sRGBEncoding\";\n      case 3002:\n        return \"RGBEEncoding\";\n      case 3003:\n        return \"LogLuvEncoding\";\n      case 3004:\n        return \"RGBM7Encoding\";\n      case 3005:\n        return \"RGBM16Encoding\";\n      case 3006:\n        return \"RGBDEncoding\";\n      case 3007:\n        return \"GammaEncoding\";\n      default:\n        return \"ClampToEdgeWrapping\";\n    }\n  };\n  return {\n    name: id,\n    url: texture.image.currentSrc,\n    encoding: encodingType(texture.encoding),\n    wrapT: repeatType(texture.wrapT),\n    flipY: texture.flipY.toString()\n  };\n};\nconst UniformsGL = _ref => {\n  let {\n    program,\n    material,\n    setTexNumber\n  } = _ref;\n  const gl = usePerf(state => state.gl);\n  const [uniforms, set] = useState(null);\n  useEffect(() => {\n    if (gl) {\n      const data = program == null ? void 0 : program.getUniforms();\n      let TexCount = 0;\n      const format = /* @__PURE__ */new Map();\n      data.seq.forEach(e => {\n        if (!e.id.includes(\"uTroika\") && e.id !== \"isOrthographic\" && e.id !== \"uvTransform\" && e.id !== \"lightProbe\" && e.id !== \"projectionMatrix\" && e.id !== \"viewMatrix\" && e.id !== \"normalMatrix\" && e.id !== \"modelMatrix\" && e.id !== \"modelViewMatrix\") {\n          let values = [];\n          let data2 = {\n            name: e.id\n          };\n          if (e.cache) {\n            e.cache.forEach(v => {\n              if (typeof v !== \"undefined\") {\n                values.push(v.toString().substring(0, 4));\n              }\n            });\n            data2.value = values.join();\n            if (material[e.id] && material[e.id].image) {\n              if (material[e.id].image) {\n                TexCount++;\n                data2.value = addTextureUniforms(e.id, material[e.id]);\n              }\n            }\n            if (!data2.value) {\n              data2.value = \"empty\";\n            }\n            format.set(e.id, data2);\n          }\n        }\n      });\n      if (material.uniforms) {\n        Object.keys(material.uniforms).forEach(key => {\n          const uniform = material.uniforms[key];\n          if (uniform.value) {\n            const {\n              value\n            } = uniform;\n            let data2 = {\n              name: key\n            };\n            if (key.includes(\"uTroika\")) {\n              return;\n            }\n            if (value.isTexture) {\n              TexCount++;\n              data2.value = addTextureUniforms(key, value);\n            } else {\n              let sb = JSON.stringify(value);\n              try {\n                sb = JSON.stringify(value);\n              } catch (_err) {\n                sb = value.toString();\n              }\n              data2.value = sb;\n            }\n            format.set(key, data2);\n          }\n        });\n      }\n      if (TexCount > 0) {\n        setTexNumber(TexCount);\n      }\n      set(format);\n    }\n  }, []);\n  return /* @__PURE__ */jsx(ProgramsUL, {\n    children: uniforms && Array.from(uniforms.values()).map(uniform => {\n      return /* @__PURE__ */jsx(\"span\", {\n        children: typeof uniform.value === \"string\" ? /* @__PURE__ */jsx(\"li\", {\n          children: /* @__PURE__ */jsxs(\"span\", {\n            children: [uniform.name, \" :\", \" \", /* @__PURE__ */jsxs(\"b\", {\n              children: [uniform.value.substring(0, 30), uniform.value.length > 30 ? \"...\" : \"\"]\n            })]\n          })\n        }) : /* @__PURE__ */jsxs(Fragment, {\n          children: [/* @__PURE__ */jsx(\"li\", {\n            children: /* @__PURE__ */jsxs(\"b\", {\n              children: [uniform.value.name, \":\"]\n            })\n          }), /* @__PURE__ */jsxs(\"div\", {\n            children: [Object.keys(uniform.value).map(key => {\n              return key !== \"name\" ? /* @__PURE__ */jsx(\"div\", {\n                children: key === \"url\" ? /* @__PURE__ */jsx(\"a\", {\n                  href: uniform.value[key],\n                  target: \"_blank\",\n                  children: /* @__PURE__ */jsx(\"img\", {\n                    src: uniform.value[key]\n                  })\n                }) : /* @__PURE__ */jsxs(\"li\", {\n                  children: [key, \": \", /* @__PURE__ */jsx(\"b\", {\n                    children: uniform.value[key]\n                  })]\n                })\n              }, key) : null;\n            }), /* @__PURE__ */jsxs(ProgramConsole, {\n              onClick: () => {\n                var _a;\n                console.info(material[uniform.value.name] || ((_a = material == null ? void 0 : material.uniforms[uniform.value.name]) == null ? void 0 : _a.value));\n              },\n              children: [\"console.info(\", uniform.value.name, \");\"]\n            })]\n          })]\n        })\n      }, uniform.name);\n    })\n  });\n};\nconst DynamicDrawCallInfo = _ref2 => {\n  let {\n    el\n  } = _ref2;\n  usePerf(state => state.log);\n  const gl = usePerf(state => state.gl);\n  const getVal = el2 => {\n    if (!gl) return 0;\n    const res = Math.round(el2.drawCounts.total / (gl.info.render.triangles + gl.info.render.lines + gl.info.render.points) * 100 * 10) / 10;\n    return isFinite(res) && res || 0;\n  };\n  return /* @__PURE__ */jsx(Fragment, {\n    children: el.drawCounts.total > 0 && /* @__PURE__ */jsxs(PerfI, {\n      style: {\n        height: \"auto\",\n        width: \"auto\",\n        margin: \"0 4px\"\n      },\n      children: [el.drawCounts.type === \"Triangle\" ? /* @__PURE__ */jsx(VercelLogoIcon, {\n        style: {\n          top: \"-1px\"\n        }\n      }) : /* @__PURE__ */jsx(ActivityLogIcon, {\n        style: {\n          top: \"-1px\"\n        }\n      }), el.drawCounts.total, /* @__PURE__ */jsxs(\"small\", {\n        children: [el.drawCounts.type, \"s\"]\n      }), gl && /* @__PURE__ */jsxs(PerfB, {\n        style: {\n          bottom: \"-10px\",\n          width: \"40px\",\n          fontWeight: \"bold\"\n        },\n        children: [el.visible && !el.material.wireframe ? getVal(el) : 0, \"%\"]\n      })]\n    })\n  });\n};\nconst ProgramUI = _ref3 => {\n  let {\n    el\n  } = _ref3;\n  const [showProgram, setShowProgram] = useState(el.visible);\n  const [toggleProgram, set] = useState(el.expand);\n  const [texNumber, setTexNumber] = useState(0);\n  const {\n    meshes,\n    program,\n    material\n  } = el;\n  return /* @__PURE__ */jsxs(ProgramGeo, {\n    children: [/* @__PURE__ */jsxs(ProgramHeader, {\n      onClick: () => {\n        el.expand = !toggleProgram;\n        Object.keys(meshes).forEach(key => {\n          const mesh = meshes[key];\n          mesh.material.wireframe = false;\n        });\n        set(!toggleProgram);\n      },\n      children: [/* @__PURE__ */jsx(Toggle, {\n        style: {\n          marginRight: \"6px\"\n        },\n        children: toggleProgram ? /* @__PURE__ */jsx(\"span\", {\n          children: /* @__PURE__ */jsx(TriangleDownIcon, {})\n        }) : /* @__PURE__ */jsx(\"span\", {\n          children: /* @__PURE__ */jsx(TriangleUpIcon, {})\n        })\n      }), program && /* @__PURE__ */jsxs(\"span\", {\n        children: [/* @__PURE__ */jsx(ProgramTitle, {\n          children: program.name\n        }), /* @__PURE__ */jsxs(PerfI, {\n          style: {\n            height: \"auto\",\n            width: \"auto\",\n            margin: \"0 4px\"\n          },\n          children: [/* @__PURE__ */jsx(LayersIcon, {\n            style: {\n              top: \"-1px\"\n            }\n          }), Object.keys(meshes).length, /* @__PURE__ */jsx(\"small\", {\n            children: Object.keys(meshes).length > 1 ? \"users\" : \"user\"\n          })]\n        }), texNumber > 0 && /* @__PURE__ */jsxs(PerfI, {\n          style: {\n            height: \"auto\",\n            width: \"auto\",\n            margin: \"0 4px\"\n          },\n          children: [texNumber > 1 ? /* @__PURE__ */jsx(ImageIcon, {\n            style: {\n              top: \"-1px\"\n            }\n          }) : /* @__PURE__ */jsx(ImageIcon, {\n            style: {\n              top: \"-1px\"\n            }\n          }), texNumber, /* @__PURE__ */jsx(\"small\", {\n            children: \"tex\"\n          })]\n        }), /* @__PURE__ */jsx(DynamicDrawCallInfo, {\n          el\n        }), material.glslVersion === \"300 es\" && /* @__PURE__ */jsxs(PerfI, {\n          style: {\n            height: \"auto\",\n            width: \"auto\",\n            margin: \"0 4px\"\n          },\n          children: [/* @__PURE__ */jsx(RocketIcon, {\n            style: {\n              top: \"-1px\"\n            }\n          }), \"300\", /* @__PURE__ */jsx(\"small\", {\n            children: \"es\"\n          }), /* @__PURE__ */jsx(PerfB, {\n            style: {\n              bottom: \"-10px\",\n              width: \"40px\"\n            },\n            children: \"glsl\"\n          })]\n        })]\n      }), /* @__PURE__ */jsx(ToggleVisible, {\n        onPointerEnter: () => {\n          Object.keys(meshes).forEach(key => {\n            const mesh = meshes[key];\n            mesh.material.wireframe = true;\n          });\n        },\n        onPointerLeave: () => {\n          Object.keys(meshes).forEach(key => {\n            const mesh = meshes[key];\n            mesh.material.wireframe = false;\n          });\n        },\n        onClick: e => {\n          e.stopPropagation();\n          Object.keys(meshes).forEach(key => {\n            const mesh = meshes[key];\n            const invert = !showProgram;\n            mesh.visible = invert;\n            el.visible = invert;\n            setShowProgram(invert);\n          });\n        },\n        children: showProgram ? /* @__PURE__ */jsx(EyeOpenIcon, {}) : /* @__PURE__ */jsx(EyeNoneIcon, {})\n      })]\n    }), /* @__PURE__ */jsxs(\"div\", {\n      style: {\n        maxHeight: toggleProgram ? \"9999px\" : 0,\n        overflow: \"hidden\"\n      },\n      children: [/* @__PURE__ */jsxs(ProgramsULHeader, {\n        children: [/* @__PURE__ */jsx(ButtonIcon, {}), \" Uniforms:\"]\n      }), /* @__PURE__ */jsx(UniformsGL, {\n        program,\n        material,\n        setTexNumber\n      }), /* @__PURE__ */jsxs(ProgramsULHeader, {\n        children: [/* @__PURE__ */jsx(CubeIcon, {}), \" Geometries:\"]\n      }), /* @__PURE__ */jsx(ProgramsUL, {\n        children: meshes && Object.keys(meshes).map(key => meshes[key] && meshes[key].geometry && /* @__PURE__ */jsxs(ProgramsGeoLi, {\n          children: [/* @__PURE__ */jsxs(\"span\", {\n            children: [meshes[key].geometry.type, \": \"]\n          }), meshes[key].userData && meshes[key].userData.drawCount && /* @__PURE__ */jsxs(\"b\", {\n            children: [/* @__PURE__ */jsxs(\"div\", {\n              children: [meshes[key].userData.drawCount.count, /* @__PURE__ */jsxs(\"small\", {\n                children: [\" \", meshes[key].userData.drawCount.type, \"s\"]\n              })]\n            }), /* @__PURE__ */jsx(\"br\", {}), /* @__PURE__ */jsxs(\"div\", {\n              children: [Math.round(estimateBytesUsed(meshes[key].geometry) / 1024 * 1e3) / 1e3, \"Kb\", /* @__PURE__ */jsx(\"small\", {\n                children: \" memory used\"\n              })]\n            })]\n          })]\n        }, key))\n      }), /* @__PURE__ */jsxs(ProgramConsole, {\n        onClick: () => {\n          console.info(material);\n        },\n        children: [\"console.info(\", material.type, \")\"]\n      })]\n    })]\n  });\n};\nconst ProgramsUI = () => {\n  usePerf(state => state.triggerProgramsUpdate);\n  const programs = usePerf(state => state.programs);\n  return /* @__PURE__ */jsx(ProgramsContainer, {\n    children: programs && Array.from(programs.values()).map(el => {\n      if (!el) {\n        return null;\n      }\n      return el ? /* @__PURE__ */jsx(ProgramUI, {\n        el\n      }, el.material.uuid) : null;\n    })\n  });\n};\nexport { ProgramsUI };","map":{"version":3,"names":["addTextureUniforms","id","texture","repeatType","wrap","encodingType","encoding","name","url","image","currentSrc","wrapT","flipY","toString","UniformsGL","_ref","program","material","setTexNumber","gl","usePerf","state","uniforms","set","useState","useEffect","data","getUniforms","TexCount","format","Map","seq","forEach","e","includes","values","data2","cache","v","push","substring","value","join","Object","keys","key","uniform","isTexture","sb","JSON","stringify","_err","jsx","ProgramsUL","children","Array","from","map","jsxs","length","Fragment","href","target","src","ProgramConsole","onClick","console","info","_a","DynamicDrawCallInfo","_ref2","el","log","getVal","el2","res","Math","round","drawCounts","total","render","triangles","lines","points","isFinite","PerfI","style","height","width","margin","type","VercelLogoIcon","top","ActivityLogIcon","PerfB","bottom","fontWeight","visible","wireframe","ProgramUI","_ref3","showProgram","setShowProgram","toggleProgram","expand","texNumber","meshes","ProgramGeo","ProgramHeader","mesh","Toggle","marginRight","TriangleDownIcon","TriangleUpIcon","ProgramTitle","LayersIcon","ImageIcon","glslVersion","RocketIcon","ToggleVisible","onPointerEnter","onPointerLeave","stopPropagation","invert","EyeOpenIcon","EyeNoneIcon","maxHeight","overflow","ProgramsULHeader","ButtonIcon","CubeIcon","geometry","ProgramsGeoLi","userData","drawCount","count","estimateBytesUsed","ProgramsUI","triggerProgramsUpdate","programs","ProgramsContainer","uuid"],"sources":["/home/joshua/Documents/proyectos/proyecto-integrador/reto_clase_4/node_modules/r3f-perf/src/components/Program.tsx"],"sourcesContent":["import { FC, useEffect, useState } from 'react';\n\nimport {\n  ProgramGeo,\n  ProgramHeader,\n  ProgramTitle,\n  ToggleVisible,\n  ProgramConsole,\n  ProgramsUL,\n  ProgramsULHeader,\n  Toggle,\n  PerfI,\n  PerfB,\n  ProgramsGeoLi,\n  ProgramsContainer,\n} from '../styles';\nimport { usePerf } from '..';\nimport { ActivityLogIcon, ButtonIcon, CubeIcon, EyeNoneIcon, EyeOpenIcon, ImageIcon, LayersIcon, RocketIcon, TriangleDownIcon, TriangleUpIcon, VercelLogoIcon } from '@radix-ui/react-icons';\nimport { ProgramsPerf } from '../store';\nimport { PerfProps } from '../typings';\nimport { estimateBytesUsed } from '../helpers/estimateBytesUsed';\n\nconst addTextureUniforms = (id: string, texture: any) => {\n  const repeatType = (wrap: number) => {\n    switch (wrap) {\n      case 1000:\n        return 'RepeatWrapping';\n      case 1001:\n        return 'ClampToEdgeWrapping';\n      case 1002:\n        return 'MirroredRepeatWrapping';\n      default:\n        return 'ClampToEdgeWrapping';\n    }\n  };\n\n  const encodingType = (encoding: number) => {\n    switch (encoding) {\n      case 3000:\n        return 'LinearEncoding';\n      case 3001:\n        return 'sRGBEncoding';\n      case 3002:\n        return 'RGBEEncoding';\n      case 3003:\n        return 'LogLuvEncoding';\n      case 3004:\n        return 'RGBM7Encoding';\n      case 3005:\n        return 'RGBM16Encoding';\n      case 3006:\n        return 'RGBDEncoding';\n      case 3007:\n        return 'GammaEncoding';\n      default:\n        return 'ClampToEdgeWrapping';\n    }\n  };\n  return {\n    name: id,\n    url: texture.image.currentSrc,\n    encoding: encodingType(texture.encoding),\n    wrapT: repeatType(texture.wrapT),\n    flipY: texture.flipY.toString(),\n  };\n};\n\nconst UniformsGL = ({ program, material, setTexNumber }: any) => {\n  const gl = usePerf((state) => state.gl);\n  const [uniforms, set] = useState<any | null>(null);\n\n  useEffect(() => {\n    if (gl) {\n      const data: any = program?.getUniforms();\n      let TexCount = 0;\n      const format: any = new Map();\n\n      data.seq.forEach((e: any) => {\n        if (\n          !e.id.includes('uTroika') &&\n          e.id !== 'isOrthographic' &&\n          e.id !== 'uvTransform' &&\n          e.id !== 'lightProbe' &&\n          e.id !== 'projectionMatrix' &&\n          e.id !== 'viewMatrix' &&\n          e.id !== 'normalMatrix' &&\n          e.id !== 'modelMatrix' &&\n          e.id !== 'modelViewMatrix'\n        ) {\n          let values: any = [];\n          let data: any = {\n            name: e.id,\n          };\n          if (e.cache) {\n            e.cache.forEach((v: any) => {\n              if (typeof v !== 'undefined') {\n                values.push(v.toString().substring(0, 4));\n              }\n            });\n            data.value = values.join();\n            if (material[e.id] && material[e.id].image) {\n              if (material[e.id].image) {\n                TexCount++;\n                data.value = addTextureUniforms(e.id, material[e.id]);\n              }\n            }\n            if (!data.value) {\n              data.value = 'empty';\n            }\n            format.set(e.id, data);\n          }\n        }\n      });\n\n      if (material.uniforms) {\n        Object.keys(material.uniforms).forEach((key: any) => {\n          const uniform = material.uniforms[key];\n          if (uniform.value) {\n            const { value } = uniform;\n            let data: any = {\n              name: key,\n            };\n            if (key.includes('uTroika')) {\n              return;\n            }\n            if (value.isTexture) {\n              TexCount++;\n              data.value = addTextureUniforms(key, value);\n            } else {\n              let sb = JSON.stringify(value);\n              try {\n                sb = JSON.stringify(value);\n              } catch (_err) {\n                sb = value.toString();\n              }\n              data.value = sb;\n            }\n            format.set(key, data);\n          }\n        });\n      }\n\n      if (TexCount > 0) {\n        setTexNumber(TexCount);\n      }\n      set(format);\n    }\n  }, []);\n\n  return (\n    <ProgramsUL>\n      {uniforms &&\n        Array.from(uniforms.values()).map((uniform: any) => {\n          return (\n            <span key={uniform.name}>\n              {typeof uniform.value === 'string' ? (\n                <li>\n                  <span>\n                    {uniform.name} :{' '}\n                    <b>\n                      {uniform.value.substring(0, 30)}\n                      {uniform.value.length > 30 ? '...' : ''}\n                    </b>\n                  </span>\n                </li>\n              ) : (\n                <>\n                  <li>\n                    <b>{uniform.value.name}:</b>\n                  </li>\n                  <div>\n                    {Object.keys(uniform.value).map((key) => {\n                      return key !== 'name' ? (\n                        <div key={key}>\n                          {key === 'url' ? (\n                            <a href={uniform.value[key]} target=\"_blank\">\n                              <img src={uniform.value[key]} />\n                            </a>\n                          ) : (\n                            <li>\n                              {key}: <b>{uniform.value[key]}</b>\n                            </li>\n                          )}\n                        </div>\n                      ) : null;\n                    })}\n                    <ProgramConsole\n                      onClick={() => {\n                        console.info(\n                          material[uniform.value.name] ||\n                            material?.uniforms[uniform.value.name]?.value\n                        );\n                      }}\n                    >\n                      console.info({uniform.value.name});\n                    </ProgramConsole>\n                  </div>\n                </>\n              )}\n            </span>\n          );\n        })}\n    </ProgramsUL>\n  );\n};\ntype ProgramUIProps = {\n  el: ProgramsPerf;\n};\n\nconst DynamicDrawCallInfo = ({ el }: any) => {\n  usePerf((state) => state.log);\n  const gl: any = usePerf((state) => state.gl);\n\n  const getVal = (el: any) => {\n    if (!gl) return 0;\n\n    const res =\n      Math.round(\n        (el.drawCounts.total /\n          (gl.info.render.triangles +\n            gl.info.render.lines +\n            gl.info.render.points)) *\n          100 *\n          10\n      ) / 10;\n    return (isFinite(res) && res) || 0;\n  };\n  return (\n    <>\n      {el.drawCounts.total > 0 && (\n        <PerfI style={{ height: 'auto', width: 'auto', margin: '0 4px' }}>\n          {el.drawCounts.type === 'Triangle' ? (\n            <VercelLogoIcon style={{ top: '-1px' }} />\n          ) : (\n            <ActivityLogIcon style={{ top: '-1px' }} />\n          )}\n          {el.drawCounts.total}\n          <small>{el.drawCounts.type}s</small>\n          {gl && (\n            <PerfB\n              style={{ bottom: '-10px', width: '40px', fontWeight: 'bold' }}\n            >\n              {el.visible && !el.material.wireframe ? getVal(el) : 0}%\n            </PerfB>\n          )}\n        </PerfI>\n      )}\n    </>\n  );\n};\nconst ProgramUI: FC<ProgramUIProps> = ({ el }) => {\n  const [showProgram, setShowProgram] = useState(el.visible);\n\n  const [toggleProgram, set] = useState(el.expand);\n  const [texNumber, setTexNumber] = useState(0);\n  const { meshes, program, material }: any = el;\n\n  return (\n    <ProgramGeo>\n      <ProgramHeader\n        onClick={() => {\n          el.expand = !toggleProgram;\n\n          Object.keys(meshes).forEach((key) => {\n            const mesh = meshes[key];\n\n            mesh.material.wireframe = false;\n          });\n\n          set(!toggleProgram);\n        }}\n      >\n        <Toggle style={{ marginRight: '6px' }}>\n          {toggleProgram ? (\n            <span>\n              <TriangleDownIcon />\n            </span>\n          ) : (\n            <span>\n              <TriangleUpIcon />\n            </span>\n          )}\n        </Toggle>\n        {program && (\n          <span>\n            <ProgramTitle>{program.name}</ProgramTitle>\n\n            <PerfI style={{ height: 'auto', width: 'auto', margin: '0 4px' }}>\n              <LayersIcon style={{ top: '-1px' }} />\n              {Object.keys(meshes).length}\n              <small>{Object.keys(meshes).length > 1 ? 'users' : 'user'}</small>\n            </PerfI>\n            {texNumber > 0 && (\n              <PerfI style={{ height: 'auto', width: 'auto', margin: '0 4px' }}>\n                {texNumber > 1 ? (\n                  <ImageIcon style={{ top: '-1px' }} />\n                ) : (\n                  <ImageIcon style={{ top: '-1px' }} />\n                )}\n                {texNumber}\n                <small>tex</small>\n              </PerfI>\n            )}\n            <DynamicDrawCallInfo el={el} />\n            {material.glslVersion === '300 es' && (\n              <PerfI style={{ height: 'auto', width: 'auto', margin: '0 4px' }}>\n                <RocketIcon style={{ top: '-1px' }} />\n                300\n                <small>es</small>\n                <PerfB style={{ bottom: '-10px', width: '40px' }}>glsl</PerfB>\n              </PerfI>\n            )}\n          </span>\n        )}\n        <ToggleVisible\n          onPointerEnter={() => {\n            Object.keys(meshes).forEach((key) => {\n              const mesh = meshes[key];\n              mesh.material.wireframe = true;\n            });\n          }}\n          onPointerLeave={() => {\n            Object.keys(meshes).forEach((key) => {\n              const mesh = meshes[key];\n              mesh.material.wireframe = false;\n            });\n          }}\n          onClick={(e: any) => {\n            e.stopPropagation();\n\n            Object.keys(meshes).forEach((key) => {\n              const mesh = meshes[key];\n              const invert = !showProgram;\n              mesh.visible = invert;\n              el.visible = invert;\n              setShowProgram(invert);\n            });\n          }}\n        >\n          {showProgram ? <EyeOpenIcon /> : <EyeNoneIcon />}\n        </ToggleVisible>\n      </ProgramHeader>\n      <div\n        style={{ maxHeight: toggleProgram ? '9999px' : 0, overflow: 'hidden' }}\n      >\n        <ProgramsULHeader>\n          <ButtonIcon /> Uniforms:\n        </ProgramsULHeader>\n        <UniformsGL\n          program={program}\n          material={material}\n          setTexNumber={setTexNumber}\n        />\n        <ProgramsULHeader>\n          <CubeIcon /> Geometries:\n        </ProgramsULHeader>\n\n        <ProgramsUL>\n          {meshes &&\n            Object.keys(meshes).map(\n              (key) =>\n                meshes[key] &&\n                meshes[key].geometry && (\n                  <ProgramsGeoLi key={key}>\n                    <span>{meshes[key].geometry.type}: </span>\n                    {meshes[key].userData && meshes[key].userData.drawCount && (\n                      <b>\n                        <div>\n                          {meshes[key].userData.drawCount.count}\n                          <small> {meshes[key].userData.drawCount.type}s</small>\n                        </div>\n                        <br />\n                        <div>\n                          {Math.round(\n                            (estimateBytesUsed(meshes[key].geometry) / 1024) *\n                              1000\n                          ) / 1000}\n                          Kb\n                          <small> memory used</small>\n                        </div>\n                      </b>\n                    )}\n                  </ProgramsGeoLi>\n                )\n            )}\n        </ProgramsUL>\n        <ProgramConsole\n          onClick={() => {\n            console.info(material);\n          }}\n        >\n          console.info({material.type})\n        </ProgramConsole>\n      </div>\n    </ProgramGeo>\n  );\n};\n\nexport const ProgramsUI: FC<PerfProps> = () => {\n  usePerf((state) => state.triggerProgramsUpdate);\n  const programs:any = usePerf((state) => state.programs);\n  return (\n    <ProgramsContainer>\n      {programs &&\n        Array.from(programs.values()).map((el: any) => {\n          if (!el) {\n            return null;\n          }\n          return el ? <ProgramUI key={el.material.uuid} el={el} /> : null;\n        })}\n    </ProgramsContainer>\n  );\n};\n"],"mappings":";;;;;;;AAsBA,MAAMA,kBAAA,GAAqBA,CAACC,EAAA,EAAYC,OAAA,KAAiB;EACjD,MAAAC,UAAA,GAAcC,IAAA,IAAiB;IACnC,QAAQA,IAAA;MACN,KAAK;QACI;MACT,KAAK;QACI;MACT,KAAK;QACI;MACT;QACS;IAAA;EACX;EAGI,MAAAC,YAAA,GAAgBC,QAAA,IAAqB;IACzC,QAAQA,QAAA;MACN,KAAK;QACI;MACT,KAAK;QACI;MACT,KAAK;QACI;MACT,KAAK;QACI;MACT,KAAK;QACI;MACT,KAAK;QACI;MACT,KAAK;QACI;MACT,KAAK;QACI;MACT;QACS;IAAA;EACX;EAEK;IACLC,IAAA,EAAMN,EAAA;IACNO,GAAA,EAAKN,OAAA,CAAQO,KAAA,CAAMC,UAAA;IACnBJ,QAAA,EAAUD,YAAA,CAAaH,OAAA,CAAQI,QAAQ;IACvCK,KAAA,EAAOR,UAAA,CAAWD,OAAA,CAAQS,KAAK;IAC/BC,KAAA,EAAOV,OAAA,CAAQU,KAAA,CAAMC,QAAA;EAAS;AAElC;AAEA,MAAMC,UAAA,GAAaC,IAAA,IAA8C;EAAA,IAA7C;IAAEC,OAAA;IAASC,QAAA;IAAUC;EAAA,IAAAH,IAAA;EACvC,MAAMI,EAAA,GAAKC,OAAA,CAASC,KAAA,IAAUA,KAAA,CAAMF,EAAE;EACtC,MAAM,CAACG,QAAA,EAAUC,GAAG,IAAIC,QAAA,CAAqB,IAAI;EAEjDC,SAAA,CAAU,MAAM;IACd,IAAIN,EAAA,EAAI;MACA,MAAAO,IAAA,GAAYV,OAAA,oBAAAA,OAAA,CAASW,WAAA;MAC3B,IAAIC,QAAA,GAAW;MACT,MAAAC,MAAA,sBAAkBC,GAAA;MAEnBJ,IAAA,CAAAK,GAAA,CAAIC,OAAA,CAASC,CAAA,IAAW;QAC3B,IACE,CAACA,CAAA,CAAEhC,EAAA,CAAGiC,QAAA,CAAS,SAAS,KACxBD,CAAA,CAAEhC,EAAA,KAAO,oBACTgC,CAAA,CAAEhC,EAAA,KAAO,iBACTgC,CAAA,CAAEhC,EAAA,KAAO,gBACTgC,CAAA,CAAEhC,EAAA,KAAO,sBACTgC,CAAA,CAAEhC,EAAA,KAAO,gBACTgC,CAAA,CAAEhC,EAAA,KAAO,kBACTgC,CAAA,CAAEhC,EAAA,KAAO,iBACTgC,CAAA,CAAEhC,EAAA,KAAO,mBACT;UACA,IAAIkC,MAAA,GAAc;UAClB,IAAIC,KAAA,GAAY;YACd7B,IAAA,EAAM0B,CAAA,CAAEhC;UAAA;UAEV,IAAIgC,CAAA,CAAEI,KAAA,EAAO;YACTJ,CAAA,CAAAI,KAAA,CAAML,OAAA,CAASM,CAAA,IAAW;cACtB,WAAOA,CAAA,KAAM,aAAa;gBAC5BH,MAAA,CAAOI,IAAA,CAAKD,CAAA,CAAEzB,QAAA,GAAW2B,SAAA,CAAU,GAAG,CAAC,CAAC;cAC1C;YAAA,CACD;YACDJ,KAAA,CAAKK,KAAA,GAAQN,MAAA,CAAOO,IAAA;YAChB,IAAAzB,QAAA,CAASgB,CAAA,CAAEhC,EAAE,KAAKgB,QAAA,CAASgB,CAAA,CAAEhC,EAAE,EAAEQ,KAAA,EAAO;cAC1C,IAAIQ,QAAA,CAASgB,CAAA,CAAEhC,EAAE,EAAEQ,KAAA,EAAO;gBACxBmB,QAAA;gBACAQ,KAAA,CAAKK,KAAA,GAAQzC,kBAAA,CAAmBiC,CAAA,CAAEhC,EAAA,EAAIgB,QAAA,CAASgB,CAAA,CAAEhC,EAAE,CAAC;cACtD;YACF;YACI,KAACmC,KAAA,CAAKK,KAAA,EAAO;cACfL,KAAA,CAAKK,KAAA,GAAQ;YACf;YACOZ,MAAA,CAAAN,GAAA,CAAIU,CAAA,CAAEhC,EAAA,EAAImC,KAAI;UACvB;QACF;MAAA,CACD;MAED,IAAInB,QAAA,CAASK,QAAA,EAAU;QACrBqB,MAAA,CAAOC,IAAA,CAAK3B,QAAA,CAASK,QAAQ,EAAEU,OAAA,CAASa,GAAA,IAAa;UAC7C,MAAAC,OAAA,GAAU7B,QAAA,CAASK,QAAA,CAASuB,GAAG;UACrC,IAAIC,OAAA,CAAQL,KAAA,EAAO;YACX;cAAEA;YAAU,IAAAK,OAAA;YAClB,IAAIV,KAAA,GAAY;cACd7B,IAAA,EAAMsC;YAAA;YAEJ,IAAAA,GAAA,CAAIX,QAAA,CAAS,SAAS,GAAG;cAC3B;YACF;YACA,IAAIO,KAAA,CAAMM,SAAA,EAAW;cACnBnB,QAAA;cACAQ,KAAA,CAAKK,KAAA,GAAQzC,kBAAA,CAAmB6C,GAAA,EAAKJ,KAAK;YAAA,OACrC;cACD,IAAAO,EAAA,GAAKC,IAAA,CAAKC,SAAA,CAAUT,KAAK;cACzB;gBACGO,EAAA,GAAAC,IAAA,CAAKC,SAAA,CAAUT,KAAK;cAAA,SAClBU,IAAA;gBACPH,EAAA,GAAKP,KAAA,CAAM5B,QAAA;cACb;cACAuB,KAAA,CAAKK,KAAA,GAAQO,EAAA;YACf;YACOnB,MAAA,CAAAN,GAAA,CAAIsB,GAAA,EAAKT,KAAI;UACtB;QAAA,CACD;MACH;MAEA,IAAIR,QAAA,GAAW,GAAG;QAChBV,YAAA,CAAaU,QAAQ;MACvB;MACAL,GAAA,CAAIM,MAAM;IACZ;EACF,GAAG,EAAE;EAGH,sBAAAuB,GAAA,CAACC,UAAA,EACE;IAAAC,QAAA,EAAAhC,QAAA,IACCiC,KAAA,CAAMC,IAAA,CAAKlC,QAAA,CAASa,MAAA,EAAQ,EAAEsB,GAAA,CAAKX,OAAA,IAAiB;MAEhD,sBAAAM,GAAA,CAAC;QACEE,QAAA,EAAO,OAAAR,OAAA,CAAQL,KAAA,KAAU,WACxB,eAAAW,GAAA,CAAC,MACC;UAAAE,QAAA,iBAAAI,IAAA,CAAC,QACE;YAAAJ,QAAA,GAAQR,OAAA,CAAAvC,IAAA,EAAK,MAAG,oBAAAmD,IAAA,CAChB,KACE;cAAAJ,QAAA,GAAQR,OAAA,CAAAL,KAAA,CAAMD,SAAA,CAAU,GAAG,EAAE,GAC7BM,OAAA,CAAQL,KAAA,CAAMkB,MAAA,GAAS,KAAK,QAAQ;YAAA,CACvC;UACF;QAAA,CACF,IAGE,eAAAD,IAAA,CAAAE,QAAA;UAAAN,QAAA,GAAC,eAAAF,GAAA;YACCE,QAAA,iBAAAI,IAAA,CAAC,KAAG;cAAAJ,QAAA,GAAAR,OAAA,CAAQL,KAAA,CAAMlC,IAAA,EAAK;YAAA,CAAC;UAC1B,mBAAAmD,IAAA,CACC,OACE;YAAAJ,QAAA,GAAAX,MAAA,CAAOC,IAAA,CAAKE,OAAA,CAAQL,KAAK,EAAEgB,GAAA,CAAKZ,GAAA,IAAQ;cAChC,OAAAA,GAAA,KAAQ,SACb,eAAAO,GAAA,CAAC,OACE;gBAAAE,QAAA,EAAAT,GAAA,KAAQ,QACN,eAAAO,GAAA;kBAAES,IAAA,EAAMf,OAAA,CAAQL,KAAA,CAAMI,GAAG;kBAAGiB,MAAA,EAAO;kBAClCR,QAAA,EAAC,eAAAF,GAAA;oBAAIW,GAAA,EAAKjB,OAAA,CAAQL,KAAA,CAAMI,GAAG;kBAAG;gBAAA,CAChC,IAEA,eAAAa,IAAA,CAAC,MACE;kBAAAJ,QAAA,GAAAT,GAAA,EAAI,MAAG,eAAAO,GAAA;oBAAGE,QAAA,EAAQR,OAAA,CAAAL,KAAA,CAAMI,GAAG;kBAAA,CAAE;gBAChC;cAAA,GARMA,GAUV,IACE;YAAA,CACL,GACD,eAAAa,IAAA,CAACM,cAAA;cACCC,OAAA,EAASA,CAAA,KAAM;;gBACLC,OAAA,CAAAC,IAAA,CACNlD,QAAA,CAAS6B,OAAA,CAAQL,KAAA,CAAMlC,IAAI,OACzB6D,EAAA,GAAAnD,QAAA,oBAAAA,QAAA,CAAUK,QAAA,CAASwB,OAAA,CAAQL,KAAA,CAAMlC,IAAA,MAAjC,gBAAA6D,EAAA,CAAwC3B,KAAA;cAE9C;cACDa,QAAA,oBACeR,OAAA,CAAQL,KAAA,CAAMlC,IAAA,EAAK;YAAA,EACnC;UAAA,CACF;QACF;MAAA,GA3COuC,OAAA,CAAQvC,IA6CnB;IAEH;EACL;AAEJ;AAKA,MAAM8D,mBAAA,GAAsBC,KAAA,IAAiB;EAAA,IAAhB;IAAEC;EAAA,IAAAD,KAAA;EACrBlD,OAAA,CAACC,KAAA,IAAUA,KAAA,CAAMmD,GAAG;EAC5B,MAAMrD,EAAA,GAAUC,OAAA,CAASC,KAAA,IAAUA,KAAA,CAAMF,EAAE;EAErC,MAAAsD,MAAA,GAAUC,GAAA,IAAY;IAC1B,IAAI,CAACvD,EAAA,EAAW;IAEhB,MAAMwD,GAAA,GACJC,IAAA,CAAKC,KAAA,CACFH,GAAA,CAAGI,UAAA,CAAWC,KAAA,IACZ5D,EAAA,CAAGgD,IAAA,CAAKa,MAAA,CAAOC,SAAA,GACd9D,EAAA,CAAGgD,IAAA,CAAKa,MAAA,CAAOE,KAAA,GACf/D,EAAA,CAAGgD,IAAA,CAAKa,MAAA,CAAOG,MAAA,IACjB,MACA,GACA;IACE,OAAAC,QAAA,CAAST,GAAG,KAAKA,GAAA,IAAQ;EAAA;EAEnC,OAEK,eAAAvB,GAAA,CAAAQ,QAAA;IAAAN,QAAA,EAAAiB,EAAA,CAAGO,UAAA,CAAWC,KAAA,GAAQ,KACpB,eAAArB,IAAA,CAAA2B,KAAA;MAAMC,KAAA,EAAO;QAAEC,MAAA,EAAQ;QAAQC,KAAA,EAAO;QAAQC,MAAA,EAAQ;MACpD;MAAAnC,QAAA,GAAAiB,EAAA,CAAGO,UAAA,CAAWY,IAAA,KAAS,aACrB,eAAAtC,GAAA,CAAAuC,cAAA;QAAeL,KAAA,EAAO;UAAEM,GAAA,EAAK;QAAO;MAAA,CAAG,IAEvC,eAAAxC,GAAA,CAAAyC,eAAA;QAAgBP,KAAA,EAAO;UAAEM,GAAA,EAAK;QAAA;MAAA,CAAU,GAE1CrB,EAAA,CAAGO,UAAA,CAAWC,KAAA,iBAAArB,IAAA,CACd,SAAO;QAAAJ,QAAA,GAAAiB,EAAA,CAAGO,UAAA,CAAWY,IAAA,EAAK;MAAA,CAAC,GAC3BvE,EAAA,IACC,eAAAuC,IAAA,CAACoC,KAAA;QACCR,KAAA,EAAO;UAAES,MAAA,EAAQ;UAASP,KAAA,EAAO;UAAQQ,UAAA,EAAY;QAAO;QAE3D1C,QAAA,GAAAiB,EAAA,CAAG0B,OAAA,IAAW,CAAC1B,EAAA,CAAGtD,QAAA,CAASiF,SAAA,GAAYzB,MAAA,CAAOF,EAAE,IAAI,GAAE;MAAA,EACzD;IAEJ;EAEJ;AAEJ;AACA,MAAM4B,SAAA,GAAgCC,KAAA,IAAY;EAAA,IAAX;IAAE7B;EAAA,IAAA6B,KAAA;EACvC,MAAM,CAACC,WAAA,EAAaC,cAAc,IAAI9E,QAAA,CAAS+C,EAAA,CAAG0B,OAAO;EAEzD,MAAM,CAACM,aAAA,EAAehF,GAAG,IAAIC,QAAA,CAAS+C,EAAA,CAAGiC,MAAM;EAC/C,MAAM,CAACC,SAAA,EAAWvF,YAAY,IAAIM,QAAA,CAAS,CAAC;EAC5C,MAAM;IAAEkF,MAAA;IAAQ1F,OAAA;IAASC;EAAA,IAAkBsD,EAAA;EAE3C,sBAAAb,IAAA,CACGiD,UAAA,EACC;IAAArD,QAAA,kBAAAI,IAAA,CAACkD,aAAA;MACC3C,OAAA,EAASA,CAAA,KAAM;QACbM,EAAA,CAAGiC,MAAA,GAAS,CAACD,aAAA;QAEb5D,MAAA,CAAOC,IAAA,CAAK8D,MAAM,EAAE1E,OAAA,CAASa,GAAA,IAAQ;UAC7B,MAAAgE,IAAA,GAAOH,MAAA,CAAO7D,GAAG;UAEvBgE,IAAA,CAAK5F,QAAA,CAASiF,SAAA,GAAY;QAAA,CAC3B;QAED3E,GAAA,CAAI,CAACgF,aAAa;MACpB;MAEAjD,QAAA,kBAAAF,GAAA,CAAC0D,MAAA;QAAOxB,KAAA,EAAO;UAAEyB,WAAA,EAAa;QAAA;QAC3BzD,QAAA,EAAAiD,aAAA,GACE,eAAAnD,GAAA;UACCE,QAAA,EAAC,eAAAF,GAAA,CAAA4D,gBAAA,GAAiB;QAAA,CACpB,IAEA,eAAA5D,GAAA,CAAC;UACCE,QAAA,EAAC,eAAAF,GAAA,CAAA6D,cAAA,IAAe;QAAA,CAClB;MAEJ,IACCjG,OAAA,mBAAA0C,IAAA,CACE,QACC;QAAAJ,QAAA,GAAC,eAAAF,GAAA,CAAA8D,YAAA;UAAc5D,QAAA,EAAAtC,OAAA,CAAQT;QAAK,IAE5B,eAAAmD,IAAA,CAAC2B,KAAA,EAAM;UAAAC,KAAA,EAAO;YAAEC,MAAA,EAAQ;YAAQC,KAAA,EAAO;YAAQC,MAAA,EAAQ;UAAA;UACrDnC,QAAA,kBAAAF,GAAA,CAAC+D,UAAA,EAAW;YAAA7B,KAAA,EAAO;cAAEM,GAAA,EAAK;YAAA;UAAA,CAAU,GACnCjD,MAAA,CAAOC,IAAA,CAAK8D,MAAM,EAAE/C,MAAA,EACrB,eAAAP,GAAA,CAAC;YAAOE,QAAA,EAAOX,MAAA,CAAAC,IAAA,CAAK8D,MAAM,EAAE/C,MAAA,GAAS,IAAI,UAAU;UAAO;QAAA,CAC5D,GACC8C,SAAA,GAAY,KACV,eAAA/C,IAAA,CAAA2B,KAAA;UAAMC,KAAA,EAAO;YAAEC,MAAA,EAAQ;YAAQC,KAAA,EAAO;YAAQC,MAAA,EAAQ;UAAA;UACpDnC,QAAA,GAAAmD,SAAA,GAAY,IACX,eAAArD,GAAA,CAACgE,SAAA,EAAU;YAAA9B,KAAA,EAAO;cAAEM,GAAA,EAAK;YAAA;UAAU,oBAAAxC,GAAA,CAElCgE,SAAA,EAAU;YAAA9B,KAAA,EAAO;cAAEM,GAAA,EAAK;YAAA;UAAA,CAAU,GAEpCa,SAAA,EACD,eAAArD,GAAA,CAAC;YAAME,QAAA,EAAG;UAAA;QAAA,CACZ,GAEF,eAAAF,GAAA,CAACiB,mBAAA;UAAoBE;QAAA,CAAQ,GAC5BtD,QAAA,CAASoG,WAAA,KAAgB,YACxB,eAAA3D,IAAA,CAAC2B,KAAA,EAAM;UAAAC,KAAA,EAAO;YAAEC,MAAA,EAAQ;YAAQC,KAAA,EAAO;YAAQC,MAAA,EAAQ;UAAA;UACrDnC,QAAA,kBAAAF,GAAA,CAACkE,UAAA,EAAW;YAAAhC,KAAA,EAAO;cAAEM,GAAA,EAAK;YAAA;UAAA,CAAU,GAAE,OAEtC,eAAAxC,GAAA,CAAC;YAAME,QAAA,EAAE;UAAA,IACT,eAAAF,GAAA,CAAC0C,KAAA;YAAMR,KAAA,EAAO;cAAES,MAAA,EAAQ;cAASP,KAAA,EAAO;YAAO;YAAGlC,QAAA,EAAI;UAAA;QAAA,CACxD;MAAA,CAEJ,GAEF,eAAAF,GAAA,CAACmE,aAAA;QACCC,cAAA,EAAgBA,CAAA,KAAM;UACpB7E,MAAA,CAAOC,IAAA,CAAK8D,MAAM,EAAE1E,OAAA,CAASa,GAAA,IAAQ;YAC7B,MAAAgE,IAAA,GAAOH,MAAA,CAAO7D,GAAG;YACvBgE,IAAA,CAAK5F,QAAA,CAASiF,SAAA,GAAY;UAAA,CAC3B;QACH;QACAuB,cAAA,EAAgBA,CAAA,KAAM;UACpB9E,MAAA,CAAOC,IAAA,CAAK8D,MAAM,EAAE1E,OAAA,CAASa,GAAA,IAAQ;YAC7B,MAAAgE,IAAA,GAAOH,MAAA,CAAO7D,GAAG;YACvBgE,IAAA,CAAK5F,QAAA,CAASiF,SAAA,GAAY;UAAA,CAC3B;QACH;QACAjC,OAAA,EAAUhC,CAAA,IAAW;UACnBA,CAAA,CAAEyF,eAAA,EAAgB;UAElB/E,MAAA,CAAOC,IAAA,CAAK8D,MAAM,EAAE1E,OAAA,CAASa,GAAA,IAAQ;YAC7B,MAAAgE,IAAA,GAAOH,MAAA,CAAO7D,GAAG;YACvB,MAAM8E,MAAA,GAAS,CAACtB,WAAA;YAChBQ,IAAA,CAAKZ,OAAA,GAAU0B,MAAA;YACfpD,EAAA,CAAG0B,OAAA,GAAU0B,MAAA;YACbrB,cAAA,CAAeqB,MAAM;UAAA,CACtB;QACH;QAECrE,QAAA,EAAc+C,WAAA,kBAAAjD,GAAA,CAACwE,WAAA,EAAY,qBAAAxE,GAAA,CAAMyE,WAAA,EAAY;MAAA,EAChD;IAAA,EACF,EACA,eAAAnE,IAAA,CAAC;MACC4B,KAAA,EAAO;QAAEwC,SAAA,EAAWvB,aAAA,GAAgB,WAAW;QAAGwB,QAAA,EAAU;MAAS;MAErEzE,QAAA,kBAAAI,IAAA,CAACsE,gBAAA,EACC;QAAA1E,QAAA,kBAAAF,GAAA,CAAC6E,UAAA,EAAW,KAAE;MAAA,CAChB,GACA,eAAA7E,GAAA,CAACtC,UAAA;QACCE,OAAA;QACAC,QAAA;QACAC;MAAA,EACF,iBAAAwC,IAAA,CACCsE,gBAAA,EACC;QAAA1E,QAAA,kBAAAF,GAAA,CAAC8E,QAAA,EAAS,KAAE;MAAA,CACd,kBAAA9E,GAAA,CAECC,UAAA,EACE;QAAAC,QAAA,EAAAoD,MAAA,IACC/D,MAAA,CAAOC,IAAA,CAAK8D,MAAM,EAAEjD,GAAA,CACjBZ,GAAA,IACC6D,MAAA,CAAO7D,GAAG,KACV6D,MAAA,CAAO7D,GAAG,EAAEsF,QAAA,IACV,eAAAzE,IAAA,CAAC0E,aAAA,EACC;UAAA9E,QAAA,kBAAAI,IAAA,CAAC,QAAM;YAAAJ,QAAA,GAAOoD,MAAA,CAAA7D,GAAG,EAAEsF,QAAA,CAASzC,IAAA,EAAK;UAAA,CAAE,GAClCgB,MAAA,CAAO7D,GAAG,EAAEwF,QAAA,IAAY3B,MAAA,CAAO7D,GAAG,EAAEwF,QAAA,CAASC,SAAA,IAC5C,eAAA5E,IAAA,CAAC,KACC;YAAAJ,QAAA,kBAAAI,IAAA,CAAC,OACE;cAAAJ,QAAA,GAAOoD,MAAA,CAAA7D,GAAG,EAAEwF,QAAA,CAASC,SAAA,CAAUC,KAAA,iBAAA7E,IAAA,CAC/B,SAAM;gBAAAJ,QAAA,QAAEoD,MAAA,CAAO7D,GAAG,EAAEwF,QAAA,CAASC,SAAA,CAAU5C,IAAA,EAAK;cAAA,CAAC;YAAA,CAChD,kBAAAtC,GAAA,CACC,MAAG,oBAAAM,IAAA,CACH,OACE;cAAAJ,QAAA,GAAKsB,IAAA,CAAAC,KAAA,CACH2D,iBAAA,CAAkB9B,MAAA,CAAO7D,GAAG,EAAEsF,QAAQ,IAAI,OACzC,OACA,KAAK,MAET,eAAA/E,GAAA,CAAC;gBAAME,QAAA,EAAY;cAAA;YAAA,CACrB;UAAA,CACF;QAAA,GAjBgBT,GAmBpB;MAAA,CAGV,GACA,eAAAa,IAAA,CAACM,cAAA;QACCC,OAAA,EAASA,CAAA,KAAM;UACbC,OAAA,CAAQC,IAAA,CAAKlD,QAAQ;QACvB;QACDqC,QAAA,oBACerC,QAAA,CAASyE,IAAA,EAAK;MAAA,EAC9B;IAAA,EACF;EACF;AAEJ;AAEO,MAAM+C,UAAA,GAA4BA,CAAA,KAAM;EACrCrH,OAAA,CAACC,KAAA,IAAUA,KAAA,CAAMqH,qBAAqB;EAC9C,MAAMC,QAAA,GAAevH,OAAA,CAASC,KAAA,IAAUA,KAAA,CAAMsH,QAAQ;EAEpD,sBAAAvF,GAAA,CAACwF,iBAAA,EACE;IAAAtF,QAAA,EAAAqF,QAAA,IACCpF,KAAA,CAAMC,IAAA,CAAKmF,QAAA,CAASxG,MAAA,EAAQ,EAAEsB,GAAA,CAAKc,EAAA,IAAY;MAC7C,IAAI,CAACA,EAAA,EAAI;QACA;MACT;MACA,OAAOA,EAAA,GAAM,eAAAnB,GAAA,CAAA+C,SAAA;QAAiC5B;MAAA,GAAlBA,EAAA,CAAGtD,QAAA,CAAS4H,IAAc,IAAK;IAC5D;EACL;AAEJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}